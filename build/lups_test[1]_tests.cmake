add_test( LexerTest.TestNextToken [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=LexerTest.TestNextToken]==] --gtest_also_run_disabled_tests)
set_tests_properties( LexerTest.TestNextToken PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( LexerTest.IfStatements [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=LexerTest.IfStatements]==] --gtest_also_run_disabled_tests)
set_tests_properties( LexerTest.IfStatements PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( LexerTest.Variables [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=LexerTest.Variables]==] --gtest_also_run_disabled_tests)
set_tests_properties( LexerTest.Variables PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( LexerTest.Strings [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=LexerTest.Strings]==] --gtest_also_run_disabled_tests)
set_tests_properties( LexerTest.Strings PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( LexerTest.FunctionDeclaration [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=LexerTest.FunctionDeclaration]==] --gtest_also_run_disabled_tests)
set_tests_properties( LexerTest.FunctionDeclaration PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( LexerTest.EqualNonEqual [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=LexerTest.EqualNonEqual]==] --gtest_also_run_disabled_tests)
set_tests_properties( LexerTest.EqualNonEqual PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( LexerTest.ArrayTest [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=LexerTest.ArrayTest]==] --gtest_also_run_disabled_tests)
set_tests_properties( LexerTest.ArrayTest PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( LexerTest.HashTest [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=LexerTest.HashTest]==] --gtest_also_run_disabled_tests)
set_tests_properties( LexerTest.HashTest PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParserTest.LetStatements [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParserTest.LetStatements]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParserTest.LetStatements PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParserTest.ReturnStatements [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParserTest.ReturnStatements]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParserTest.ReturnStatements PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParserTest.IdentifierExpression [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParserTest.IdentifierExpression]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParserTest.IdentifierExpression PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParserTest.IntegerLiteralExpression [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParserTest.IntegerLiteralExpression]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParserTest.IntegerLiteralExpression PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParserTest.PrefixExpressionTest [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParserTest.PrefixExpressionTest]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParserTest.PrefixExpressionTest PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParserTest.HashLiteralStrings [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParserTest.HashLiteralStrings]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParserTest.HashLiteralStrings PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParserTest.EmptyHashLiteral [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParserTest.EmptyHashLiteral]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParserTest.EmptyHashLiteral PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParserTest.HashLiteralWithExpressions [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParserTest.HashLiteralWithExpressions]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParserTest.HashLiteralWithExpressions PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParserTest.InfixExpressionTest [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParserTest.InfixExpressionTest]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParserTest.InfixExpressionTest PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParserTest.BooleanInfixExpression [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParserTest.BooleanInfixExpression]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParserTest.BooleanInfixExpression PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParserTest.OperatorPrecedenceParsing [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParserTest.OperatorPrecedenceParsing]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParserTest.OperatorPrecedenceParsing PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParserTest.IfExpressionTest [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParserTest.IfExpressionTest]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParserTest.IfExpressionTest PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParserTest.FunctionLiteralParsing [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParserTest.FunctionLiteralParsing]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParserTest.FunctionLiteralParsing PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParserTest.FunctionParameterTest [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParserTest.FunctionParameterTest]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParserTest.FunctionParameterTest PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParserTest.CallExpressionParsing [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParserTest.CallExpressionParsing]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParserTest.CallExpressionParsing PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParserTest.StringLiteralTest [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParserTest.StringLiteralTest]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParserTest.StringLiteralTest PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParserTest.ArrayLiteralParsing [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParserTest.ArrayLiteralParsing]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParserTest.ArrayLiteralParsing PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParserTest.IndexExpression [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParserTest.IndexExpression]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParserTest.IndexExpression PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ParsetTest.BooleanPrefixExpressionTest [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ParsetTest.BooleanPrefixExpressionTest]==] --gtest_also_run_disabled_tests)
set_tests_properties( ParsetTest.BooleanPrefixExpressionTest PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( EvalTest.IntegerExpressions [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=EvalTest.IntegerExpressions]==] --gtest_also_run_disabled_tests)
set_tests_properties( EvalTest.IntegerExpressions PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( EvalTest.BooleanExpression [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=EvalTest.BooleanExpression]==] --gtest_also_run_disabled_tests)
set_tests_properties( EvalTest.BooleanExpression PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( EvalTest.PrefixExpressionTest [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=EvalTest.PrefixExpressionTest]==] --gtest_also_run_disabled_tests)
set_tests_properties( EvalTest.PrefixExpressionTest PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( EvalTest.IfElseTest [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=EvalTest.IfElseTest]==] --gtest_also_run_disabled_tests)
set_tests_properties( EvalTest.IfElseTest PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( EvalTest.ReturnTest [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=EvalTest.ReturnTest]==] --gtest_also_run_disabled_tests)
set_tests_properties( EvalTest.ReturnTest PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( EvalTest.ReturnComplex [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=EvalTest.ReturnComplex]==] --gtest_also_run_disabled_tests)
set_tests_properties( EvalTest.ReturnComplex PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( EvalTest.ErrorHandling [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=EvalTest.ErrorHandling]==] --gtest_also_run_disabled_tests)
set_tests_properties( EvalTest.ErrorHandling PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( EvalTest.LetStatements [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=EvalTest.LetStatements]==] --gtest_also_run_disabled_tests)
set_tests_properties( EvalTest.LetStatements PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( EvalTest.FunctionObject [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=EvalTest.FunctionObject]==] --gtest_also_run_disabled_tests)
set_tests_properties( EvalTest.FunctionObject PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( EvalTest.FunctionUsage [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=EvalTest.FunctionUsage]==] --gtest_also_run_disabled_tests)
set_tests_properties( EvalTest.FunctionUsage PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( EvalTest.StringLiteralTest [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=EvalTest.StringLiteralTest]==] --gtest_also_run_disabled_tests)
set_tests_properties( EvalTest.StringLiteralTest PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( EvalTest.BuiltInFunction [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=EvalTest.BuiltInFunction]==] --gtest_also_run_disabled_tests)
set_tests_properties( EvalTest.BuiltInFunction PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( EvalTest.ArrayLiteralEvaluation [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=EvalTest.ArrayLiteralEvaluation]==] --gtest_also_run_disabled_tests)
set_tests_properties( EvalTest.ArrayLiteralEvaluation PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( EvalTest.ArrayIndexExpressions [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=EvalTest.ArrayIndexExpressions]==] --gtest_also_run_disabled_tests)
set_tests_properties( EvalTest.ArrayIndexExpressions PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( EvalTest.HashEvaluationTest [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=EvalTest.HashEvaluationTest]==] --gtest_also_run_disabled_tests)
set_tests_properties( EvalTest.HashEvaluationTest PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( EvalTest.HashIndexExpressions [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=EvalTest.HashIndexExpressions]==] --gtest_also_run_disabled_tests)
set_tests_properties( EvalTest.HashIndexExpressions PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( ObjectTest.HashKeyTest [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=ObjectTest.HashKeyTest]==] --gtest_also_run_disabled_tests)
set_tests_properties( ObjectTest.HashKeyTest PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( CodeTest.Make [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=CodeTest.Make]==] --gtest_also_run_disabled_tests)
set_tests_properties( CodeTest.Make PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( CodeTest.InstructionString [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=CodeTest.InstructionString]==] --gtest_also_run_disabled_tests)
set_tests_properties( CodeTest.InstructionString PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( CodeTest.ReadOperands [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=CodeTest.ReadOperands]==] --gtest_also_run_disabled_tests)
set_tests_properties( CodeTest.ReadOperands PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( CompilerTest.IntegerArithmetic [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=CompilerTest.IntegerArithmetic]==] --gtest_also_run_disabled_tests)
set_tests_properties( CompilerTest.IntegerArithmetic PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( CompilerTest.ConditionalTest [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=CompilerTest.ConditionalTest]==] --gtest_also_run_disabled_tests)
set_tests_properties( CompilerTest.ConditionalTest PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( CompilerTest.BooleanExpressions [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=CompilerTest.BooleanExpressions]==] --gtest_also_run_disabled_tests)
set_tests_properties( CompilerTest.BooleanExpressions PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( CompilerTest.StringExpressions [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=CompilerTest.StringExpressions]==] --gtest_also_run_disabled_tests)
set_tests_properties( CompilerTest.StringExpressions PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( CompilerTest.GlobalLetStatements [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=CompilerTest.GlobalLetStatements]==] --gtest_also_run_disabled_tests)
set_tests_properties( CompilerTest.GlobalLetStatements PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( CompilerTest.ArrayLiterals [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=CompilerTest.ArrayLiterals]==] --gtest_also_run_disabled_tests)
set_tests_properties( CompilerTest.ArrayLiterals PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( CompilerTest.HashLiterals [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=CompilerTest.HashLiterals]==] --gtest_also_run_disabled_tests)
set_tests_properties( CompilerTest.HashLiterals PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( CompilerTest.CIndexExpression [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=CompilerTest.CIndexExpression]==] --gtest_also_run_disabled_tests)
set_tests_properties( CompilerTest.CIndexExpression PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( VMTest.VMIntegerArithmetic [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=VMTest.VMIntegerArithmetic]==] --gtest_also_run_disabled_tests)
set_tests_properties( VMTest.VMIntegerArithmetic PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( VMTest.VMBooleanTest [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=VMTest.VMBooleanTest]==] --gtest_also_run_disabled_tests)
set_tests_properties( VMTest.VMBooleanTest PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( VMTest.Conditionals [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=VMTest.Conditionals]==] --gtest_also_run_disabled_tests)
set_tests_properties( VMTest.Conditionals PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( VMTest.GlobalLetStatements [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=VMTest.GlobalLetStatements]==] --gtest_also_run_disabled_tests)
set_tests_properties( VMTest.GlobalLetStatements PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( VMTest.StringExpressions [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=VMTest.StringExpressions]==] --gtest_also_run_disabled_tests)
set_tests_properties( VMTest.StringExpressions PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( VMTest.ArrayLiterals [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=VMTest.ArrayLiterals]==] --gtest_also_run_disabled_tests)
set_tests_properties( VMTest.ArrayLiterals PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( VMTest.HashLiterals [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=VMTest.HashLiterals]==] --gtest_also_run_disabled_tests)
set_tests_properties( VMTest.HashLiterals PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( VMTest.IndexExpressions [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=VMTest.IndexExpressions]==] --gtest_also_run_disabled_tests)
set_tests_properties( VMTest.IndexExpressions PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( SymbolTableTest.TestDefine [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=SymbolTableTest.TestDefine]==] --gtest_also_run_disabled_tests)
set_tests_properties( SymbolTableTest.TestDefine PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
add_test( SymbolTableTest.TestResolveGlobal [==[/home/eemil/dev/c++/lups/build/lups_test]==] [==[--gtest_filter=SymbolTableTest.TestResolveGlobal]==] --gtest_also_run_disabled_tests)
set_tests_properties( SymbolTableTest.TestResolveGlobal PROPERTIES WORKING_DIRECTORY [==[/home/eemil/dev/c++/lups/build]==] SKIP_REGULAR_EXPRESSION [==[\[  SKIPPED \]]==])
set( lups_test_TESTS LexerTest.TestNextToken LexerTest.IfStatements LexerTest.Variables LexerTest.Strings LexerTest.FunctionDeclaration LexerTest.EqualNonEqual LexerTest.ArrayTest LexerTest.HashTest ParserTest.LetStatements ParserTest.ReturnStatements ParserTest.IdentifierExpression ParserTest.IntegerLiteralExpression ParserTest.PrefixExpressionTest ParserTest.HashLiteralStrings ParserTest.EmptyHashLiteral ParserTest.HashLiteralWithExpressions ParserTest.InfixExpressionTest ParserTest.BooleanInfixExpression ParserTest.OperatorPrecedenceParsing ParserTest.IfExpressionTest ParserTest.FunctionLiteralParsing ParserTest.FunctionParameterTest ParserTest.CallExpressionParsing ParserTest.StringLiteralTest ParserTest.ArrayLiteralParsing ParserTest.IndexExpression ParsetTest.BooleanPrefixExpressionTest EvalTest.IntegerExpressions EvalTest.BooleanExpression EvalTest.PrefixExpressionTest EvalTest.IfElseTest EvalTest.ReturnTest EvalTest.ReturnComplex EvalTest.ErrorHandling EvalTest.LetStatements EvalTest.FunctionObject EvalTest.FunctionUsage EvalTest.StringLiteralTest EvalTest.BuiltInFunction EvalTest.ArrayLiteralEvaluation EvalTest.ArrayIndexExpressions EvalTest.HashEvaluationTest EvalTest.HashIndexExpressions ObjectTest.HashKeyTest CodeTest.Make CodeTest.InstructionString CodeTest.ReadOperands CompilerTest.IntegerArithmetic CompilerTest.ConditionalTest CompilerTest.BooleanExpressions CompilerTest.StringExpressions CompilerTest.GlobalLetStatements CompilerTest.ArrayLiterals CompilerTest.HashLiterals CompilerTest.CIndexExpression VMTest.VMIntegerArithmetic VMTest.VMBooleanTest VMTest.Conditionals VMTest.GlobalLetStatements VMTest.StringExpressions VMTest.ArrayLiterals VMTest.HashLiterals VMTest.IndexExpressions SymbolTableTest.TestDefine SymbolTableTest.TestResolveGlobal)
